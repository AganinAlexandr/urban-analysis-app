#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""
import sqlite3
import os
from datetime import datetime

def add_missing_analysis():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê ===")
    print(f"üìÅ –§–∞–π–ª: {db_path}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        cursor.execute("SELECT id, method_name FROM processing_methods WHERE method_name IN ('user_rating', 'nlp_vader')")
        methods = cursor.fetchall()
        
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        for method_id, method_name in methods:
            print(f"   ‚Ä¢ {method_name} (ID: {method_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        cursor.execute("""
            SELECT r.id, r.review_text, r.rating 
            FROM reviews r 
            LEFT JOIN analysis_results ar ON r.id = ar.review_id 
            WHERE ar.id IS NULL
        """)
        missing_reviews = cursor.fetchall()
        
        print(f"\nüìä –û—Ç–∑—ã–≤–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {len(missing_reviews)}")
        
        if not missing_reviews:
            print("‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –∏–º–µ—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞!")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        added_count = 0
        
        for method_id, method_name in methods:
            print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–æ–º: {method_name}")
            
            for review_id, review_text, rating in missing_reviews:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞
                if method_name == 'user_rating':
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
                    if rating is None:
                        sentiment = 'neutral'
                        confidence = 0.5
                    elif rating >= 4:
                        sentiment = 'positive'
                        confidence = 0.8
                    elif rating <= 2:
                        sentiment = 'negative'
                        confidence = 0.8
                    else:
                        sentiment = 'neutral'
                        confidence = 0.6
                elif method_name == 'nlp_vader':
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    text_lower = review_text.lower() if review_text else ""
                    positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–¥–æ–≤–æ–ª–µ–Ω', '—Å–ø–∞—Å–∏–±–æ']
                    negative_words = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–∂–∞–ª–æ–±–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '—É–∂–∞—Å']
                    
                    positive_count = sum(1 for word in positive_words if word in text_lower)
                    negative_count = sum(1 for word in negative_words if word in text_lower)
                    
                    if positive_count > negative_count:
                        sentiment = 'positive'
                        confidence = 0.7
                    elif negative_count > positive_count:
                        sentiment = 'negative'
                        confidence = 0.7
                    else:
                        sentiment = 'neutral'
                        confidence = 0.5
                else:
                    sentiment = 'neutral'
                    confidence = 0.5
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∑—ã–≤–∞
                if sentiment == 'positive':
                    review_type = 'gratitude'
                elif sentiment == 'negative':
                    review_type = 'complaint'
                else:
                    review_type = 'informational'
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                cursor.execute("""
                    INSERT INTO analysis_results 
                    (review_id, method_id, sentiment, confidence, review_type, processed_at)
                    VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                """, (review_id, method_id, sentiment, confidence, review_type))
                
                added_count += 1
                
                if added_count % 10 == 0:
                    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê: {added_count}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM reviews")
        reviews_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM analysis_results")
        analysis_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM processing_methods")
        methods_count = cursor.fetchone()[0]
        
        print(f"   ‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: {reviews_count}")
        print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_count}")
        print(f"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {methods_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
        cursor.execute("""
            SELECT pm.method_name, COUNT(ar.id) as count
            FROM processing_methods pm
            LEFT JOIN analysis_results ar ON pm.id = ar.method_id
            GROUP BY pm.id, pm.method_name
            ORDER BY count DESC
        """)
        method_stats = cursor.fetchall()
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–¢–û–î–ê–ú:")
        for method_name, count in method_stats:
            print(f"   ‚Ä¢ {method_name}: {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = add_missing_analysis()
    if success:
        print("\nüéâ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤") 