import sqlite3
import pandas as pd
import os
from typing import Dict, Any, Optional

class SampleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = "urban_analysis.db"):
        self.db_path = db_path
        self._ensure_sample_field_exists()
    
    def _ensure_sample_field_exists(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –≤_–í—ã–±–æ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ reviews"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.execute("PRAGMA table_info(reviews)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if '–≤_–í—ã–±–æ—Ä–∫–µ' not in columns:
                conn.execute("ALTER TABLE reviews ADD COLUMN –≤_–í—ã–±–æ—Ä–∫–µ TEXT DEFAULT NULL")
                print("‚úÖ –ü–æ–ª–µ –≤_–í—ã–±–æ—Ä–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É reviews")
            
            conn.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—è –≤_–í—ã–±–æ—Ä–∫–µ: {e}")
    
    def get_connection(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_path)
    
    def create_sample_from_filters(self, filters: Dict[str, Any]) -> int:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (group_type, sentiment_method, color_scheme)
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ
        """
        try:
            conn = self.get_connection()
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—ã–±–æ—Ä–∫—É
            conn.execute("UPDATE reviews SET –≤_–í—ã–±–æ—Ä–∫–µ = NULL")
            
            # –°—Ç—Ä–æ–∏–º SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            query, params = self._build_sample_query(filters)
            
            print(f"üîç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏: {query}")
            print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤_–í—ã–±–æ—Ä–∫–µ
            cursor = conn.execute(query, params)
            selected_reviews = cursor.fetchall()
            
            if selected_reviews:
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                review_ids = [review[0] for review in selected_reviews]
                placeholders = ','.join(['?' for _ in review_ids])
                
                update_query = f"UPDATE reviews SET –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞' WHERE id IN ({placeholders})"
                conn.execute(update_query, review_ids)
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—ã–±–æ—Ä–∫–∞ –∏–∑ {len(selected_reviews)} –∑–∞–ø–∏—Å–µ–π")
            return len(selected_reviews)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏: {e}")
            return 0
    
    def _build_sample_query(self, filters: Dict[str, Any]) -> tuple:
        """
        –°—Ç—Ä–æ–∏—Ç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            
        Returns:
            tuple: (SQL –∑–∞–ø—Ä–æ—Å, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        """
        base_query = """
            SELECT DISTINCT r.id
            FROM reviews r
            JOIN objects o ON r.object_id = o.id
            LEFT JOIN object_group_mapping ogm ON o.id = ogm.object_id
            LEFT JOIN object_groups og ON ogm.group_id = og.id
            WHERE 1=1
        """
        params = []
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ –æ–±—ä–µ–∫—Ç–∞
        if 'group_type' in filters and filters['group_type']:
            base_query += " AND og.group_type = ?"
            params.append(filters['group_type'])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É)
        if 'detected_group_type' in filters and filters['detected_group_type']:
            base_query += " AND og.group_type = ?"
            params.append(filters['detected_group_type'])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–æ–¥—É –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        if 'sentiment_method' in filters and filters['sentiment_method']:
            base_query += " AND r.sentiment_method = ?"
            params.append(filters['sentiment_method'])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ (—Ä–µ–π—Ç–∏–Ω–≥)
        if 'color_scheme' in filters and filters['color_scheme'] == 'rating':
            base_query += " AND r.rating IS NOT NULL"
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if 'rating' in filters and filters['rating']:
            base_query += " AND r.rating = ?"
            params.append(filters['rating'])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if 'date_from' in filters and filters['date_from']:
            base_query += " AND r.review_date >= ?"
            params.append(filters['date_from'])
        
        if 'date_to' in filters and filters['date_to']:
            base_query += " AND r.review_date <= ?"
            params.append(filters['date_to'])
        
        return base_query, params
    
    def get_sample_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–∫–µ
        """
        try:
            conn = self.get_connection()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ
            cursor = conn.execute("SELECT COUNT(*) FROM reviews WHERE –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞'")
            total_records = cursor.fetchone()[0]
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
            cursor = conn.execute("""
                SELECT og.group_type, COUNT(*) as count
                FROM reviews r
                JOIN objects o ON r.object_id = o.id
                LEFT JOIN object_group_mapping ogm ON o.id = ogm.object_id
                LEFT JOIN object_groups og ON ogm.group_id = og.id
                WHERE r.–≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞'
                GROUP BY og.group_type
            """)
            group_distribution = dict(cursor.fetchall())
            
            # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            cursor = conn.execute("""
                SELECT MIN(review_date), MAX(review_date)
                FROM reviews
                WHERE –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞' AND review_date IS NOT NULL
            """)
            date_range = cursor.fetchone()
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
            completeness = self._calculate_field_completeness_sample()
            
            conn.close()
            
            return {
                'total_records': total_records,
                'group_distribution': group_distribution,
                'date_range': {
                    'min_date': date_range[0] if date_range[0] else None,
                    'max_date': date_range[1] if date_range[1] else None
                },
                'field_completeness': completeness
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±–æ—Ä–∫–µ: {e}")
            return {}
    
    def _calculate_field_completeness_sample(self) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ"""
        try:
            conn = self.get_connection()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ
            cursor = conn.execute("SELECT COUNT(*) FROM reviews WHERE –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞'")
            total = cursor.fetchone()[0]
            
            if total == 0:
                return {}
            
            completeness = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
            fields = [
                ('review_text', '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞'),
                ('rating', '–†–µ–π—Ç–∏–Ω–≥'),
                ('review_date', '–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞')
            ]
            
            for field, name in fields:
                cursor = conn.execute(f"""
                    SELECT COUNT(*) FROM reviews 
                    WHERE –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞' AND {field} IS NOT NULL
                """)
                filled = cursor.fetchone()[0]
                percentage = (filled / total) * 100 if total > 0 else 0
                completeness[name] = round(percentage, 1)
            
            conn.close()
            return completeness
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def download_sample(self) -> pd.DataFrame:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±–æ—Ä–∫—É –∫–∞–∫ DataFrame
        
        Returns:
            pd.DataFrame: –î–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏
        """
        try:
            conn = self.get_connection()
            
            query = """
                SELECT 
                    o.id as object_id,
                    o.name as object_name,
                    o.address as object_address,
                    o.latitude,
                    o.longitude,
                    o.district,
                    og.group_type as group_supplier,
                    og.group_type as group_determined,
                    r.id as review_id,
                    r.review_text,
                    r.rating,
                    r.review_date,
                    NULL as sentiment_score,
                    NULL as sentiment_method,
                    r.source,
                    r.–≤_–í—ã–±–æ—Ä–∫–µ
                FROM reviews r
                JOIN objects o ON r.object_id = o.id
                LEFT JOIN object_group_mapping ogm ON o.id = ogm.object_id
                LEFT JOIN object_groups og ON ogm.group_id = og.id
                WHERE r.–≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞'
                ORDER BY o.name, r.review_date
            """
            
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏: {e}")
            return pd.DataFrame()
    
    def clear_sample(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤_–í—ã–±–æ—Ä–∫–µ = NULL –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π)
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            conn = self.get_connection()
            conn.execute("UPDATE reviews SET –≤_–í—ã–±–æ—Ä–∫–µ = NULL")
            conn.commit()
            conn.close()
            
            print("‚úÖ –í—ã–±–æ—Ä–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∫–∏: {e}")
            return False
    
    def get_sample_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±–æ—Ä–∫–µ
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏
        """
        try:
            conn = self.get_connection()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ
            cursor = conn.execute("SELECT COUNT(*) FROM reviews WHERE –≤_–í—ã–±–æ—Ä–∫–µ = '–¥–∞'")
            sample_count = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = conn.execute("SELECT COUNT(*) FROM reviews")
            total_count = cursor.fetchone()[0]
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            percentage = (sample_count / total_count * 100) if total_count > 0 else 0
            
            conn.close()
            
            return {
                'sample_count': sample_count,
                'total_count': total_count,
                'percentage': round(percentage, 1)
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {} 