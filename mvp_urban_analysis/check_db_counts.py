import sqlite3
import os

def check_db_counts():
    db_path = "urban_analysis.db"
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {db_path}")
    
    conn = sqlite3.connect(db_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    tables = ['objects', 'reviews', 'analysis_results']
    
    for table in tables:
        cursor = conn.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        print(f"üìã –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    cursor = conn.execute("""
        SELECT o.id, o.name, o.address, COUNT(r.id) as reviews_count
        FROM objects o
        LEFT JOIN reviews r ON o.id = r.object_id
        GROUP BY o.id
        ORDER BY o.id
    """)
    objects = cursor.fetchall()
    
    print(f"\nüè¢ –û–±—ä–µ–∫—Ç—ã –∏ –∏—Ö –æ—Ç–∑—ã–≤—ã:")
    for obj in objects:
        obj_id, name, address, reviews_count = obj
        print(f"  ID: {obj_id}, –ò–º—è: {name}, –ê–¥—Ä–µ—Å: {address}, –û—Ç–∑—ã–≤–æ–≤: {reviews_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
    cursor = conn.execute("""
        SELECT object_id, review_text, COUNT(*) as count
        FROM reviews
        GROUP BY object_id, review_text
        HAVING COUNT(*) > 1
    """)
    duplicates = cursor.fetchall()
    
    if duplicates:
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç–∑—ã–≤–æ–≤:")
        for dup in duplicates:
            print(f"  –û–±—ä–µ–∫—Ç ID: {dup[0]}, –¢–µ–∫—Å—Ç: {dup[1][:50]}..., –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {dup[2]}")
    else:
        print(f"\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    conn.close()

if __name__ == "__main__":
    check_db_counts() 