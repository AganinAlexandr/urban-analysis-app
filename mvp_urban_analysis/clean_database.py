#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.core.db_cleaner import DatabaseCleaner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('database_cleanup.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=== –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–¢ –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –î–ê–ù–ù–´–• ===")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(db_path) / 1024:.1f} KB")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    try:
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cleaner = DatabaseCleaner(db_path)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        result = cleaner.clean_all_duplicates()
        
        print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        print()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò ===")
        
        groups_cleanup = result['groups_cleanup']
        objects_cleanup = result['objects_cleanup']
        
        print(f"üóÇÔ∏è  –ì—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤:")
        print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {groups_cleanup['cleaned']}")
        print(f"   ‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {groups_cleanup['kept']}")
        
        print(f"üè¢ –û–±—ä–µ–∫—Ç—ã:")
        print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {objects_cleanup['cleaned']}")
        print(f"   ‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {objects_cleanup['kept']}")
        
        print()
        print("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
        
        stats_before = result['stats_before']
        stats_after = result['stats_after']
        
        print("–î–æ –æ—á–∏—Å—Ç–∫–∏:")
        for key, value in stats_before.items():
            if key.endswith('_count'):
                table_name = key.replace('_count', '').replace('_', ' ').title()
                print(f"   ‚Ä¢ {table_name}: {value}")
        
        print()
        print("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
        for key, value in stats_after.items():
            if key.endswith('_count'):
                table_name = key.replace('_count', '').replace('_', ' ').title()
                print(f"   ‚Ä¢ {table_name}: {value}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç–∫–æ–Ω–æ–º–∏—é
        total_before = sum(stats_before.values())
        total_after = sum(stats_after.values())
        saved = total_before - total_after
        
        print()
        print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è –∑–∞–ø–∏—Å–µ–π: {saved}")
        print(f"üìâ –°–∂–∞—Ç–∏–µ: {(saved / total_before * 100):.1f}%" if total_before > 0 else "üìâ –°–∂–∞—Ç–∏–µ: 0%")
        
        print()
        print("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
        
        if groups_cleanup['cleaned'] > 0:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if objects_cleanup['cleaned'] > 0:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            print("   ‚Ä¢ –°—Å—ã–ª–∫–∏ –≤ –æ—Ç–∑—ã–≤–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        if groups_cleanup['cleaned'] == 0 and objects_cleanup['cleaned'] == 0:
            print("‚ÑπÔ∏è  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print("   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        print()
        print("üîß –°–æ–∑–¥–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º")
        print("üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î: {e}", exc_info=True)
        return False
    
    finally:
        print()
        print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: database_cleanup.log")


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 