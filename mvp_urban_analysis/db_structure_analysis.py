#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""
import sqlite3
import os
from datetime import datetime

def analyze_database_structure():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print("=== –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    print(f"üìÅ –§–∞–π–ª: {db_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(db_path) / 1024:.1f} KB")
    print(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name != 'sqlite_sequence'")
        tables = cursor.fetchall()
        
        print(f"üìã –û–°–ù–û–í–ù–´–ï –¢–ê–ë–õ–ò–¶–´: {len(tables)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for table in tables:
            table_name = table[0]
            print(f"üìÑ –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            print("   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            foreign_keys = []
            primary_keys = []
            
            for col in columns:
                col_id, col_name, col_type, not_null, default_val, pk = col
                pk_str = " üîë PRIMARY KEY" if pk else ""
                not_null_str = " NOT NULL" if not_null else ""
                default_str = f" DEFAULT {default_val}" if default_val else ""
                
                print(f"     ‚Ä¢ {col_name} ({col_type}){not_null_str}{default_str}{pk_str}")
                
                if pk:
                    primary_keys.append(col_name)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA foreign_key_list({table_name})")
            fk_list = cursor.fetchall()
            
            if fk_list:
                print("   üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
                for fk in fk_list:
                    if len(fk) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        table_name_fk, id, seq, fk_table, from_col, to_col = fk[:6]
                        print(f"     ‚Ä¢ {from_col} ‚Üí {fk_table}.{to_col}")
                        foreign_keys.append((from_col, fk_table, to_col))
            
            print()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        print("üîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò:")
        print()
        
        connections = {
            'object_groups': [],
            'detected_groups': [],
            'objects': [],
            'reviews': [],
            'processing_methods': [],
            'analysis_results': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("PRAGMA foreign_key_list")
        all_foreign_keys = cursor.fetchall()
        
        for fk in all_foreign_keys:
            if len(fk) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                table_name, id, seq, fk_table, from_col, to_col = fk[:6]
                if table_name in connections:
                    connections[table_name].append((from_col, fk_table, to_col))
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤—è–∑–∏
        for table, fks in connections.items():
            if fks:
                print(f"üìÑ {table}:")
                for from_col, fk_table, to_col in fks:
                    print(f"   ‚Ä¢ {from_col} ‚Üí {fk_table}.{to_col}")
                print()
        
        # –°—Ö–µ–º–∞ —Å–≤—è–∑–µ–π
        print("üìä –°–•–ï–ú–ê –°–í–Ø–ó–ï–ô:")
        print("   object_groups (1) ‚Üê‚Üí (many) objects")
        print("   detected_groups (1) ‚Üê‚Üí (many) objects")
        print("   objects (1) ‚Üê‚Üí (many) reviews")
        print("   reviews (1) ‚Üê‚Üí (many) analysis_results")
        print("   processing_methods (1) ‚Üê‚Üí (many) analysis_results")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
        total_records = 0
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            total_records += count
            print(f"   ‚Ä¢ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        print("\nüìà –ò–ù–î–ï–ö–°–´:")
        cursor.execute("SELECT name, tbl_name, sql FROM sqlite_master WHERE type='index'")
        indexes = cursor.fetchall()
        
        for idx in indexes:
            idx_name, tbl_name, sql = idx
            print(f"   ‚Ä¢ {idx_name} (—Ç–∞–±–ª–∏—Ü–∞: {tbl_name})")
        
        conn.close()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ë–î: {e}")

if __name__ == "__main__":
    analyze_database_structure() 