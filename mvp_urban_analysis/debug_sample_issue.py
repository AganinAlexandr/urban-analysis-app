import sqlite3
import pandas as pd
import os

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "data/urban_analysis.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()
    print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {[table[0] for table in tables]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã reviews
    cursor = conn.execute("PRAGMA table_info(reviews)")
    columns = cursor.fetchall()
    print(f"üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã reviews:")
    for col in columns:
        print(f"  - {col[1]} ({col[2]})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    cursor = conn.execute("SELECT COUNT(*) FROM objects")
    objects_count = cursor.fetchone()[0]
    print(f"üè¢ –û–±—ä–µ–∫—Ç–æ–≤ –≤ –ë–î: {objects_count}")
    
    cursor = conn.execute("SELECT COUNT(*) FROM reviews")
    reviews_count = cursor.fetchone()[0]
    print(f"üí¨ –û—Ç–∑—ã–≤–æ–≤ –≤ –ë–î: {reviews_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –≤_–í—ã–±–æ—Ä–∫–µ
    cursor = conn.execute("SELECT COUNT(*) FROM reviews WHERE –≤_–í—ã–±–æ—Ä–∫–µ IS NOT NULL")
    sample_count = cursor.fetchone()[0]
    print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ: {sample_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    cursor = conn.execute("""
        SELECT o.id, o.name, o.address, o.group_type, o.detected_group_type, 
               COUNT(r.id) as reviews_count
        FROM objects o
        LEFT JOIN reviews r ON o.id = r.object_id
        GROUP BY o.id
        LIMIT 5
    """)
    objects = cursor.fetchall()
    print(f"\nüè¢ –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤:")
    for obj in objects:
        print(f"  - ID: {obj[0]}, –ò–º—è: {obj[1]}, –ê–¥—Ä–µ—Å: {obj[2]}")
        print(f"    –ì—Ä—É–ø–ø–∞: {obj[3]}, –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {obj[4]}, –û—Ç–∑—ã–≤–æ–≤: {obj[5]}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
    cursor = conn.execute("""
        SELECT r.id, r.review_text[:50], r.rating, r.review_date, r.–≤_–í—ã–±–æ—Ä–∫–µ,
               o.name, o.group_type
        FROM reviews r
        JOIN objects o ON r.object_id = o.id
        LIMIT 5
    """)
    reviews = cursor.fetchall()
    print(f"\nüí¨ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤:")
    for review in reviews:
        print(f"  - ID: {review[0]}, –¢–µ–∫—Å—Ç: {review[1]}..., –†–µ–π—Ç–∏–Ω–≥: {review[2]}")
        print(f"    –î–∞—Ç–∞: {review[3]}, –í –≤—ã–±–æ—Ä–∫–µ: {review[4]}, –û–±—ä–µ–∫—Ç: {review[5]}, –ì—Ä—É–ø–ø–∞: {review[6]}")
    
    conn.close()

def test_sample_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SampleManager
    import sys
    sys.path.append('app/core')
    
    try:
        from sample_manager import SampleManager
        sample_manager = SampleManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters = [
            {},  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            {'group_type': '–ö–∞—Ñ–µ'},  # –ü–æ –≥—Ä—É–ø–ø–µ
            {'sentiment_method': 'textblob'},  # –ü–æ –º–µ—Ç–æ–¥—É –∞–Ω–∞–ª–∏–∑–∞
            {'color_scheme': 'rating'}  # –ü–æ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ
        ]
        
        for i, filters in enumerate(filters):
            print(f"\nüîç –¢–µ—Å—Ç {i+1}: –§–∏–ª—å—Ç—Ä—ã = {filters}")
            try:
                count = sample_manager.create_sample_from_filters(filters)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—ã–±–æ—Ä–∫–∞ –∏–∑ {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SampleManager: {e}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª sample_manager.py –±—ã–ª —É–¥–∞–ª–µ–Ω")

if __name__ == "__main__":
    check_database()
    test_sample_creation() 