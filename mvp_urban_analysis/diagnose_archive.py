#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—Ä—Ö–∏–≤–æ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
from app.core.data_processor import DataProcessor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_archive():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—Ä—Ö–∏–≤–æ–º"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–†–•–ò–í–ê")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
    processor = DataProcessor()
    df = processor.load_archive()
    
    if df.empty:
        print("‚ùå –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")
        return
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")
    print(f"  - –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    print()
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–æ–≤
    print("1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ê–ô–û–ù–û–í:")
    if 'district' in df.columns:
        district_counts = df['district'].value_counts()
        print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤: {len(district_counts)}")
        print(f"  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤:")
        for district, count in district_counts.head(10).items():
            print(f"    {district}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if 'latitude' in df.columns and 'longitude' in df.columns:
            with_coords = df[(df['latitude'] != 0.0) & (df['longitude'] != 0.0)]
            print(f"  - –ó–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(with_coords)}")
            print(f"  - –ó–∞–ø–∏—Å–µ–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(df) - len(with_coords)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –Ω–æ –±–µ–∑ —Ä–∞–π–æ–Ω–∞
            with_coords_no_district = with_coords[
                (with_coords['district'].isna()) | 
                (with_coords['district'] == '') | 
                (with_coords['district'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω')
            ]
            print(f"  - –ó–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –Ω–æ –±–µ–∑ —Ä–∞–π–æ–Ω–∞: {len(with_coords_no_district)}")
            
            if len(with_coords_no_district) > 0:
                print("  - –ü—Ä–∏–º–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±–µ–∑ —Ä–∞–π–æ–Ω–∞:")
                for idx, row in with_coords_no_district.head(3).iterrows():
                    print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: lat={row['latitude']}, lon={row['longitude']}, district='{row['district']}'")
    else:
        print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'district' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print()
    
    # 2. –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø
    print("2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ì–†–£–ü–ü:")
    if 'group' in df.columns:
        group_counts = df['group'].value_counts()
        print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(group_counts)}")
        print(f"  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø:")
        for group, count in group_counts.items():
            print(f"    {group}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
        empty_groups = df[df['group'].isna() | (df['group'] == '')]
        print(f"  - –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç–æ–π –≥—Ä—É–ø–ø–æ–π: {len(empty_groups)}")
        
        if len(empty_groups) > 0:
            print("  - –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç–æ–π –≥—Ä—É–ø–ø–æ–π:")
            for idx, row in empty_groups.head(3).iterrows():
                print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: name='{row.get('name', 'N/A')}', text='{str(row.get('review_text', ''))[:50]}...'")
    else:
        print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'group' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print()
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Ö—ç—à-–∫–ª—é—á–µ–π
    print("3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –•–≠–®-–ö–õ–Æ–ß–ï–ô:")
    if 'hash_key' in df.columns:
        hash_counts = df['hash_key'].value_counts()
        print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö—ç—à-–∫–ª—é—á–µ–π: {len(hash_counts)}")
        print(f"  - –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df) - len(hash_counts)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ —Ö—ç—à–∏
        empty_hashes = df[df['hash_key'].isna() | (df['hash_key'] == '')]
        print(f"  - –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º —Ö—ç—à–µ–º: {len(empty_hashes)}")
        
        if len(empty_hashes) > 0:
            print("  - –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º —Ö—ç—à–µ–º:")
            for idx, row in empty_hashes.head(3).iterrows():
                print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: group='{row.get('group', 'N/A')}', name='{row.get('name', 'N/A')}'")
    else:
        print("  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'hash_key' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print()
    
    # 4. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    print("4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô:")
    text_fields = ['review_text', 'answer_text', 'name', 'address']
    
    for field in text_fields:
        if field in df.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫
            with_newlines = df[df[field].astype(str).str.contains('\n', na=False)]
            print(f"  - {field}: –∑–∞–ø–∏—Å–µ–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫: {len(with_newlines)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–≤—ã—á–µ–∫
            with_quotes = df[df[field].astype(str).str.contains('"', na=False)]
            print(f"  - {field}: –∑–∞–ø–∏—Å–µ–π —Å –∫–∞–≤—ã—á–∫–∞–º–∏: {len(with_quotes)}")
            
            if len(with_newlines) > 0:
                print(f"    –ü—Ä–∏–º–µ—Ä—ã {field} —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫:")
                for idx, row in with_newlines.head(2).iterrows():
                    text = str(row[field])
                    print(f"      –°—Ç—Ä–æ–∫–∞ {idx}: {text[:100]}...")
    
    print()
    
    # 5. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print("5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:")
    print(f"  - –ó–∞–ø–∏—Å–µ–π —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π: {len(df.dropna(subset=['group', 'name', 'address', 'review_text']))}")
    print(f"  - –ó–∞–ø–∏—Å–µ–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(df) - len(df.dropna(subset=['group', 'name', 'address', 'review_text']))}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    problematic = df[df['group'].isna() | df['name'].isna() | df['review_text'].isna()]
    if len(problematic) > 0:
        print(f"  - –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(problematic)}")
        print("  - –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        for idx, row in problematic.head(3).iterrows():
            missing_fields = []
            for field in ['group', 'name', 'review_text']:
                if pd.isna(row.get(field, '')):
                    missing_fields.append(field)
            print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
    
    print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    diagnose_archive() 