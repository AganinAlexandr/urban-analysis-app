#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Ä—Ö–∏–≤–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
from app.core.data_processor import DataProcessor
from app.core.csv_processor import CSVProcessor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_archive():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–†–•–ò–í–ê")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
    processor = DataProcessor(geocoder_api_key="4a8fda1a-c9ca-4e3c-97da-e7bd2a15621a")
    df = processor.load_archive()
    
    if df.empty:
        print("‚ùå –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã
    print("\n1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤...")
    df_fixed = processor.process_districts(df)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    district_counts = df_fixed['district'].value_counts()
    print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    for district, count in district_counts.items():
        print(f"    {district}: {count}")
    
    # 2. –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    print("\n2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π...")
    csv_processor = CSVProcessor()
    
    text_fields = ['review_text', 'answer_text', 'name', 'address']
    for field in text_fields:
        if field in df_fixed.columns:
            before_count = df_fixed[field].astype(str).str.contains('\n').sum()
            df_fixed[field] = df_fixed[field].apply(csv_processor.clean_text_field)
            after_count = df_fixed[field].astype(str).str.contains('\n').sum()
            print(f"  {field}: –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫ {before_count} -> {after_count}")
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ)
    print("\n3Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø...")
    empty_groups = df_fixed[df_fixed['group'].isna() | (df_fixed['group'] == '')]
    print(f"  –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏: {len(empty_groups)}")
    
    if len(empty_groups) > 0:
        print("  –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏:")
        for idx, row in empty_groups.head(3).iterrows():
            name = row.get('name', 'N/A')
            print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: {name}")
    
    # 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
    print("\n4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
    required_fields = ['group', 'name', 'address', 'review_text']
    valid_mask = df_fixed[required_fields].notna().all(axis=1)
    
    before_count = len(df_fixed)
    df_cleaned = df_fixed[valid_mask].copy()
    after_count = len(df_cleaned)
    
    print(f"  –ó–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏: {before_count}")
    print(f"  –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {after_count}")
    print(f"  –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {before_count - after_count}")
    
    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    print("\n5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = processor.archive_file.replace('.csv', '_backup.csv')
    df.to_csv(backup_path, index=False, encoding='utf-8-sig')
    print(f"  –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    df_cleaned.to_csv(processor.archive_file, index=False, encoding='utf-8-sig')
    print(f"  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {processor.archive_file}")
    
    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df_cleaned)}")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤: {len(df_cleaned['district'].value_counts())}")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(df_cleaned['group'].value_counts())}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–∞–π–æ–Ω–æ–≤
    print(f"  –¢–æ–ø-5 —Ä–∞–π–æ–Ω–æ–≤:")
    for district, count in df_cleaned['district'].value_counts().head(5).items():
        print(f"    {district}: {count}")
    
    print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    fix_archive() 