#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import os
import shutil
from datetime import datetime

def fix_database_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ===")
    print(f"üìÅ –§–∞–π–ª: {db_path}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{db_path}.backup_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    try:
        shutil.copy2(db_path, backup_path)
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è detected_groups —Å object_groups")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ object_groups
        cursor.execute("SELECT id, group_name, group_type FROM object_groups")
        object_groups = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º detected_groups
        cursor.execute("SELECT COUNT(*) FROM detected_groups")
        detected_count = cursor.fetchone()[0]
        print(f"   üìä –¢–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ detected_groups: {detected_count}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≥—Ä—É–ø–ø—ã –≤ detected_groups
        added_count = 0
        for group_id, group_name, group_type in object_groups:
            cursor.execute("SELECT COUNT(*) FROM detected_groups WHERE group_name = ? AND group_type = ?", 
                         (group_name, group_type))
            exists = cursor.fetchone()[0]
            
            if not exists:
                cursor.execute("""
                    INSERT INTO detected_groups (group_name, group_type, detection_method, confidence, created_at)
                    VALUES (?, ?, 'manual_mapping', 1.0, CURRENT_TIMESTAMP)
                """, (group_name, group_type))
                added_count += 1
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name} ({group_type})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É "undetected"
        cursor.execute("SELECT COUNT(*) FROM detected_groups WHERE group_name = 'undetected'")
        undetected_exists = cursor.fetchone()[0]
        
        if not undetected_exists:
            cursor.execute("""
                INSERT INTO detected_groups (group_name, group_type, detection_method, confidence, created_at)
                VALUES ('undetected', 'unknown', 'manual_mapping', 0.0, CURRENT_TIMESTAMP)
            """)
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: undetected")
            added_count += 1
        
        print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {added_count}")
        
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è answer_text –≤ —Ç–∞–±–ª–∏—Ü—É reviews")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ answer_text
        cursor.execute("PRAGMA table_info(reviews)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'answer_text' not in columns:
            cursor.execute("ALTER TABLE reviews ADD COLUMN answer_text TEXT")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ answer_text –≤ —Ç–∞–±–ª–∏—Ü—É reviews")
        else:
            print("   ‚ÑπÔ∏è  –ü–æ–ª–µ answer_text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        cursor.execute("SELECT COUNT(*) FROM reviews")
        reviews_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM analysis_results")
        analysis_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM processing_methods")
        methods_count = cursor.fetchone()[0]
        
        print(f"   üìä –û—Ç–∑—ã–≤–æ–≤: {reviews_count}")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_count}")
        print(f"   üìä –ú–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {methods_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        cursor.execute("SELECT method_name FROM processing_methods")
        methods = cursor.fetchall()
        print("   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
        for method in methods:
            print(f"     ‚Ä¢ {method[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –Ω–µ –∏–º–µ—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        cursor.execute("""
            SELECT r.id, r.review_text, r.rating 
            FROM reviews r 
            LEFT JOIN analysis_results ar ON r.id = ar.review_id 
            WHERE ar.id IS NULL
        """)
        missing_analysis = cursor.fetchall()
        
        print(f"   ‚ö†Ô∏è  –û—Ç–∑—ã–≤–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {len(missing_analysis)}")
        
        if missing_analysis:
            print("   üìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞:")
            for i, (review_id, text, rating) in enumerate(missing_analysis[:3]):
                print(f"     ‚Ä¢ ID {review_id}: {text[:50]}... (—Ä–µ–π—Ç–∏–Ω–≥: {rating})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        cursor.execute("""
            SELECT pm.method_name 
            FROM processing_methods pm 
            LEFT JOIN analysis_results ar ON pm.id = ar.method_id 
            WHERE ar.id IS NULL
        """)
        unused_methods = cursor.fetchall()
        
        if unused_methods:
            print("   üìã –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã:")
            for method in unused_methods:
                print(f"     ‚Ä¢ {method[0]}")
        
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM detected_groups")
        detected_final = cursor.fetchone()[0]
        print(f"   ‚Ä¢ detected_groups: {detected_final} –∑–∞–ø–∏—Å–µ–π")
        
        cursor.execute("SELECT COUNT(*) FROM object_groups")
        object_groups_final = cursor.fetchone()[0]
        print(f"   ‚Ä¢ object_groups: {object_groups_final} –∑–∞–ø–∏—Å–µ–π")
        
        cursor.execute("SELECT COUNT(*) FROM reviews")
        reviews_final = cursor.fetchone()[0]
        print(f"   ‚Ä¢ reviews: {reviews_final} –∑–∞–ø–∏—Å–µ–π")
        
        cursor.execute("SELECT COUNT(*) FROM analysis_results")
        analysis_final = cursor.fetchone()[0]
        print(f"   ‚Ä¢ analysis_results: {analysis_final} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò: {e}")
        return False

if __name__ == "__main__":
    success = fix_database_issues()
    if success:
        print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏") 