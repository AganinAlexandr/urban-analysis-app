#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä—É–ø–ø–∞–º–∏ –≤ –ë–î
"""

import sqlite3
import pandas as pd

def fix_database_groups():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü –í –ë–î ===")
    
    db_path = 'urban_analysis_fixed.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        print("\n1. –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò...")
        cursor.execute("CREATE TABLE IF NOT EXISTS object_groups_backup AS SELECT * FROM object_groups")
        cursor.execute("CREATE TABLE IF NOT EXISTS detected_groups_backup AS SELECT * FROM detected_groups")
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # 2. –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≥—Ä—É–ø–ø—ã
        print("\n2. –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ì–†–£–ü–ü...")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –≥—Ä—É–ø–ø—É ID 3 (–®–∫–æ–ª—ã)
        cursor.execute("DELETE FROM object_groups WHERE id = 3")
        print("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –≥—Ä—É–ø–ø–∞ ID 3 (–®–∫–æ–ª—ã)")
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∞–º–∏
        print("\n3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ò –û–ë–™–ï–ö–¢–û–í...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø
        cursor.execute("""
            SELECT id, name FROM objects 
            WHERE group_id IS NULL OR detected_group_id IS NULL
        """)
        unlinked_objects = cursor.fetchall()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø: {len(unlinked_objects)}")
        
        for obj_id, name in unlinked_objects:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            group_id = None
            detected_group_id = None
            
            if '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç' in name.lower() or '–≤—ã—Å—à–∞—è —à–∫–æ–ª–∞' in name.lower():
                group_id = 8  # universities
                detected_group_id = 1  # schools (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                print(f"  {name} -> universities (ID: 8)")
            elif '—Ç–æ—Ä–≥–æ–≤—ã–π' in name.lower() or '–º–æ–ª–ª' in name.lower() or '–ø–ª–∞–∑–∞' in name.lower():
                group_id = 7  # shopping_malls
                detected_group_id = 1  # schools (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                print(f"  {name} -> shopping_malls (ID: 7)")
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–Ω–æ—Å–∏–º –∫ —à–∫–æ–ª–∞–º
                group_id = 1  # schools
                detected_group_id = 1  # schools
                print(f"  {name} -> schools (ID: 1)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
            cursor.execute("""
                UPDATE objects 
                SET group_id = ?, detected_group_id = ?
                WHERE id = ?
            """, (group_id, detected_group_id, obj_id))
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n4. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
        cursor.execute("SELECT * FROM object_groups ORDER BY id")
        groups = cursor.fetchall()
        print("–ì—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for group in groups:
            print(f"  ID: {group[0]}, –¢–∏–ø: {group[1]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {group[2]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
        cursor.execute("""
            SELECT o.id, o.name, o.group_id, o.detected_group_id,
                   og.group_type as og_type, og.group_name as og_name
            FROM objects o
            LEFT JOIN object_groups og ON o.group_id = og.id
            WHERE o.latitude IS NOT NULL AND o.longitude IS NOT NULL
        """)
        objects_with_groups = cursor.fetchall()
        
        print(f"\n–û–±—ä–µ–∫—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏:")
        for obj in objects_with_groups:
            obj_id, name, group_id, detected_group_id, og_type, og_name = obj
            print(f"  {name}: {og_type} ({og_name})")
        
        # 5. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM objects WHERE group_id IS NOT NULL")
        linked_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM objects")
        total_count = cursor.fetchone()[0]
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_count}")
        print(f"  –°–≤—è–∑–∞–Ω–æ —Å –≥—Ä—É–ø–ø–∞–º–∏: {linked_count}")
        print(f"  –ë–µ–∑ –≥—Ä—É–ø–ø: {total_count - linked_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        conn.close()

if __name__ == "__main__":
    fix_database_groups() 