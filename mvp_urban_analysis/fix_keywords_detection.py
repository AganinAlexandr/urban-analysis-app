#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
"""
import sqlite3
import os
import re
from datetime import datetime

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()
    
    # –£–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Ü–∏—Ñ—Ä—ã
    text = re.sub(r'[^\w\s]', ' ', text)
    text = re.sub(r'\d+', ' ', text)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def detect_group_by_keywords_improved(object_name, review_text):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        return 'undetected', 0.0
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        cursor.execute("""
            SELECT group_type, keyword_type, keyword, weight 
            FROM group_keywords 
            ORDER BY group_type, keyword_type
        """)
        keywords = cursor.fetchall()
        
        # –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        clean_object_name = clean_text(object_name or "")
        clean_review_text = clean_text(review_text or "")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        group_scores = {}
        
        for group_type, keyword_type, keyword, weight in keywords:
            if group_type not in group_scores:
                group_scores[group_type] = {'name_score': 0, 'text_score': 0, 'negative_score': 0}
            
            clean_keyword = clean_text(keyword)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            if keyword_type == 'name' and clean_object_name:
                if clean_keyword in clean_object_name:
                    group_scores[group_type]['name_score'] += weight
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: '{clean_keyword}' –≤ '{clean_object_name}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞
            if keyword_type == 'text' and clean_review_text:
                if clean_keyword in clean_review_text:
                    group_scores[group_type]['text_score'] += weight
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∑—ã–≤–µ: '{clean_keyword}' –≤ '{clean_review_text}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if keyword_type == 'negative' and clean_review_text:
                if clean_keyword in clean_review_text:
                    group_scores[group_type]['negative_score'] += weight
                    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ: '{clean_keyword}' –≤ '{clean_review_text}'")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        best_group = 'undetected'
        best_score = 0.0
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤:")
        for group_type, scores in group_scores.items():
            # –§–æ—Ä–º—É–ª–∞: (name_score * 2) + text_score - negative_score
            total_score = (scores['name_score'] * 2) + scores['text_score'] - scores['negative_score']
            
            print(f"   {group_type}: name={scores['name_score']}, text={scores['text_score']}, negative={scores['negative_score']}, total={total_score}")
            
            if total_score > best_score:
                best_score = total_score
                best_group = group_type
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.0 - 1.0)
        confidence = min(best_score / 5.0, 1.0) if best_score > 0 else 0.0
        
        conn.close()
        return best_group, confidence
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        return 'undetected', 0.0

def test_improved_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    test_cases = [
        ("–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ1", "–û—Ç–ª–∏—á–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≤—Ä–∞—á–∞–º–∏"),
        ("–ê–ø—Ç–µ–∫–∞ –Ω–∞ —É–≥–ª—É", "–£–¥–æ–±–Ω–∞—è –∞–ø—Ç–µ–∫–∞, –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"),
        ("–®–∫–æ–ª–∞ ‚Ññ15", "–•–æ—Ä–æ—à–∞—è —à–∫–æ–ª–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—Ç–∞–Ω–∏–µ–º"),
        ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç", "–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç"),
        ("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", "–õ–µ—á–µ–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        ("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", "–ú–∞–≥–∞–∑–∏–Ω—ã –∏ –ø–æ–∫—É–ø–∫–∏"),
        ("–¢–µ—Å—Ç–æ–≤–∞—è –±–æ–ª—å–Ω–∏—Ü–∞", "–û—Ç–ª–∏—á–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞"),
        ("–¢–µ—Å—Ç–æ–≤–∞—è —à–∫–æ–ª–∞", "–•–æ—Ä–æ—à–∞—è —à–∫–æ–ª–∞"),
        ("–¢–µ—Å—Ç–æ–≤–∞—è –∞–ø—Ç–µ–∫–∞", "–£–¥–æ–±–Ω–∞—è –∞–ø—Ç–µ–∫–∞")
    ]
    
    for i, (object_name, review_text) in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}:")
        print(f"üìÑ –û–±—ä–µ–∫—Ç: '{object_name}'")
        print(f"üìù –û—Ç–∑—ã–≤: '{review_text}'")
        
        detected_group, confidence = detect_group_by_keywords_improved(object_name, review_text)
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {detected_group} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        print("-" * 50)

def update_detected_groups_improved():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç detected_groups —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏—Ö –æ—Ç–∑—ã–≤–∞–º–∏
        cursor.execute("""
            SELECT o.id, o.name, o.group_id, 
                   GROUP_CONCAT(r.review_text, ' | ') as all_reviews
            FROM objects o
            LEFT JOIN reviews r ON o.id = r.object_id
            GROUP BY o.id, o.name, o.group_id
        """)
        objects = cursor.fetchall()
        
        updated_count = 0
        
        for obj_id, obj_name, current_group_id, reviews_text in objects:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞: '{obj_name}'")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            detected_group, confidence = detect_group_by_keywords_improved(obj_name, reviews_text or "")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π –≥—Ä—É–ø–ø—ã
            cursor.execute("SELECT id FROM detected_groups WHERE group_type = ?", (detected_group,))
            detected_group_result = cursor.fetchone()
            
            if detected_group_result:
                detected_group_id = detected_group_result[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
                cursor.execute("""
                    UPDATE objects 
                    SET detected_group_id = ? 
                    WHERE id = ?
                """, (detected_group_id, obj_id))
                
                updated_count += 1
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {detected_group} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            else:
                print(f"   ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ '{detected_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ detected_groups")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {updated_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ì–†–£–ü–ü ===")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    test_improved_detection()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º detected_groups
    print("\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ detected_groups...")
    if update_detected_groups_improved():
        print("‚úÖ –ì—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø")
    
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 