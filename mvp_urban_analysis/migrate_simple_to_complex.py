#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ç–æ—Ä –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
"""

import sqlite3
import pandas as pd
from app.core.database_fixed import db_manager_fixed

class SimpleToComplexMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    
    def __init__(self, db_path: str = "urban_analysis_fixed.db"):
        self.db_path = db_path
        self.complex_db = db_manager_fixed
    
    def migrate_simple_to_complex(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("=== –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó –ü–†–û–°–¢–´–• –¢–ê–ë–õ–ò–¶ –í –°–õ–û–ñ–ù–£–Æ –°–¢–†–£–ö–¢–£–†–£ ===")
        
        try:
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ë–î
            print("1. –û—á–∏—â–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ë–î...")
            self.complex_db.clear_all_data()
            print("‚úÖ –°–ª–æ–∂–Ω–∞—è –ë–î –æ—á–∏—â–µ–Ω–∞")
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü
            print("2. –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            simple_data = self.read_simple_data()
            
            if simple_data.empty:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
                return False
            
            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(simple_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print("3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
            success = self.migrate_data(simple_data)
            
            if success:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.check_migration_result()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def read_simple_data(self) -> pd.DataFrame:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        query = """
        SELECT 
            o.id as object_id,
            o.name,
            o.address,
            o.latitude,
            o.longitude,
            o.district,
            o.group_type,
            o.rating,
            o.count_rating,
            o.stars,
            o.external_id,
            r.id as review_id,
            r.reviewer_name,
            r.review_text,
            r.review_stars,
            r.review_date,
            r.answer_text
        FROM simple_objects o
        LEFT JOIN simple_reviews r ON o.id = r.object_id
        ORDER BY o.id, r.id
        """
        
        with sqlite3.connect(self.db_path) as conn:
            df = pd.read_sql_query(query, conn)
        
        return df
    
    def migrate_data(self, df: pd.DataFrame) -> bool:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            objects_df = df.groupby('object_id').first().reset_index()
            
            print(f"  –ú–∏–≥—Ä–∏—Ä—É–µ–º {len(objects_df)} –æ–±—ä–µ–∫—Ç–æ–≤...")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
            print("  –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã...")
            group_types = objects_df['group_type'].unique()
            for group_type in group_types:
                if group_type:
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ object_groups
                    group_id = self.complex_db.get_group_id(group_type)
                    if not group_id:
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                        with sqlite3.connect(self.db_path) as conn:
                            cursor = conn.execute("""
                                INSERT INTO object_groups (group_name, group_type)
                                VALUES (?, ?)
                            """, (group_type, group_type))
                            group_id = cursor.lastrowid
                            print(f"    –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_type} (ID: {group_id})")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ detected_groups
                    detected_group_id = self.complex_db.get_detected_group_id(group_type)
                    if not detected_group_id:
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                        with sqlite3.connect(self.db_path) as conn:
                            cursor = conn.execute("""
                                INSERT INTO detected_groups (group_name, group_type, detection_method, confidence)
                                VALUES (?, ?, ?, ?)
                            """, (group_type, group_type, 'simple_migration', 1.0))
                            detected_group_id = cursor.lastrowid
                            print(f"    –°–æ–∑–¥–∞–Ω–∞ detected –≥—Ä—É–ø–ø–∞: {group_type} (ID: {detected_group_id})")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
            for _, obj_row in objects_df.iterrows():
                # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø
                group_id = self.complex_db.get_group_id(obj_row['group_type'])
                detected_group_id = self.complex_db.get_detected_group_id(obj_row['group_type'])
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–∂–Ω–æ–π –ë–î
                object_id = self.complex_db.insert_object(
                    name=obj_row['name'],
                    address=obj_row['address'],
                    latitude=obj_row['latitude'],
                    longitude=obj_row['longitude'],
                    district=obj_row['district'],
                    group_type=obj_row['group_type'],
                    detected_group_type=obj_row['group_type']
                )
                
                print(f"    –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç: {obj_row['name']} (ID: {object_id})")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                object_reviews = df[df['object_id'] == obj_row['object_id']]
                
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
                for _, review_row in object_reviews.iterrows():
                    if pd.notna(review_row['review_id']):  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤
                        review_id = self.complex_db.insert_review(
                            object_id=object_id,
                            review_text=review_row['review_text'],
                            rating=review_row['review_stars'],
                            review_date=review_row['review_date'],
                            source='simple_migration',
                            external_id=str(review_row['review_id'])
                        )
                        
                        print(f"      –°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤: {review_row['reviewer_name']} (ID: {review_id})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def check_migration_result(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–∂–Ω–æ–π –ë–î
            df = self.complex_db.export_to_dataframe(include_analysis=True)
            print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ —Å–ª–æ–∂–Ω–æ–π –ë–î: {len(df)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
            if 'group_type' in df.columns:
                groups = df['group_type'].value_counts()
                print(f"–ì—Ä—É–ø–ø—ã: {groups.to_dict()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            coords_df = df[df['latitude'].notna() & df['longitude'].notna()]
            print(f"–û–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(coords_df)}")
            
            if not coords_df.empty:
                print("–û–±—ä–µ–∫—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:")
                for _, row in coords_df.groupby('object_id').first().iterrows():
                    print(f"  {row['name']} - {row.get('group_type', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    migrator = SimpleToComplexMigrator()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrator.migrate_simple_to_complex()
    
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main() 