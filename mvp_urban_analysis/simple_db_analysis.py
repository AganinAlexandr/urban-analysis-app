#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import os

def simple_db_analysis():
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print("=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    print(f"üìÅ –§–∞–π–ª: {db_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(db_path) / 1024:.1f} KB")
    print()
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name != 'sqlite_sequence'")
        tables = cursor.fetchall()
        
        print(f"üìã –ö–û–õ–ò–ß–ï–°–¢–í–û –¢–ê–ë–õ–ò–¶: {len(tables)}")
        print()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        main_tables = []
        for table in tables:
            table_name = table[0]
            main_tables.append(table_name)
            print(f"üìÑ {table_name}")
        
        print()
        print("=== –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶ ===")
        
        for table_name in main_tables:
            print(f"\nüìÑ –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            print("   –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            for col in columns:
                col_id, col_name, col_type, not_null, default_val, pk = col
                pk_str = " (PK)" if pk else ""
                not_null_str = " NOT NULL" if not_null else ""
                print(f"     ‚Ä¢ {col_name} ({col_type}){not_null_str}{pk_str}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        print()
        print("=== –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò ===")
        print("–°–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("‚Ä¢ object_groups (1) ‚Üê‚Üí (many) objects")
        print("‚Ä¢ detected_groups (1) ‚Üê‚Üí (many) objects") 
        print("‚Ä¢ objects (1) ‚Üê‚Üí (many) reviews")
        print("‚Ä¢ reviews (1) ‚Üê‚Üí (many) analysis_results")
        print("‚Ä¢ processing_methods (1) ‚Üê‚Üí (many) analysis_results")
        
        print()
        print("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        total_records = 0
        for table_name in main_tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            total_records += count
            print(f"‚Ä¢ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        conn.close()
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    simple_db_analysis() 