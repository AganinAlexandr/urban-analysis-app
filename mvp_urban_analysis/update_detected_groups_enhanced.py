#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ detected_groups —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
"""
import sqlite3
import os
from datetime import datetime
from simple_enhanced_keywords import SimpleKeywordProcessor, detect_group_by_simple_enhanced_keywords

def update_detected_groups_enhanced():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç detected_groups —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏—Ö –æ—Ç–∑—ã–≤–∞–º–∏
        cursor.execute("""
            SELECT o.id, o.name, o.group_id, 
                   GROUP_CONCAT(r.review_text, ' | ') as all_reviews
            FROM objects o
            LEFT JOIN reviews r ON o.id = r.object_id
            GROUP BY o.id, o.name, o.group_id
        """)
        objects = cursor.fetchall()
        
        updated_count = 0
        
        for obj_id, obj_name, current_group_id, reviews_text in objects:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞: '{obj_name}'")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            detected_group, confidence = detect_group_by_simple_enhanced_keywords(obj_name, reviews_text or "")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π –≥—Ä—É–ø–ø—ã
            cursor.execute("SELECT id FROM detected_groups WHERE group_type = ?", (detected_group,))
            detected_group_result = cursor.fetchone()
            
            if detected_group_result:
                detected_group_id = detected_group_result[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
                cursor.execute("""
                    UPDATE objects 
                    SET detected_group_id = ? 
                    WHERE id = ?
                """, (detected_group_id, obj_id))
                
                updated_count += 1
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {detected_group} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            else:
                print(f"   ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ '{detected_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ detected_groups")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {updated_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return False

def show_detection_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
    db_path = 'urban_analysis_fixed.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ì–†–£–ü–ü:")
        print("=" * 50)
        
        cursor.execute("""
            SELECT o.name, og.group_name, og.group_type, 
                   dg.group_name as detected_group_name, dg.group_type as detected_group_type
            FROM objects o
            LEFT JOIN object_groups og ON o.group_id = og.id
            LEFT JOIN detected_groups dg ON o.detected_group_id = dg.id
            ORDER BY o.name
        """)
        
        objects = cursor.fetchall()
        
        for obj_name, group_name, group_type, detected_group_name, detected_group_type in objects:
            print(f"\nüè¢ –û–±—ä–µ–∫—Ç: '{obj_name}'")
            print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞: {group_name} ({group_type})")
            print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {detected_group_name} ({detected_group_type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if group_type == detected_group_type:
                print(f"   ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –î–ê")
            else:
                print(f"   ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –ù–ï–¢")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("""
            SELECT 
                COUNT(*) as total_objects,
                SUM(CASE WHEN og.group_type = dg.group_type THEN 1 ELSE 0 END) as matched,
                SUM(CASE WHEN og.group_type != dg.group_type THEN 1 ELSE 0 END) as mismatched
            FROM objects o
            LEFT JOIN object_groups og ON o.group_id = og.id
            LEFT JOIN detected_groups dg ON o.detected_group_id = dg.id
        """)
        
        stats = cursor.fetchone()
        if stats:
            total, matched, mismatched = stats
            accuracy = (matched / total * 100) if total > 0 else 0
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total}")
            print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matched}")
            print(f"   –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {mismatched}")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï DETECTED_GROUPS –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ê–õ–ì–û–†–ò–¢–ú–û–ú ===")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º detected_groups
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ detected_groups...")
    if update_detected_groups_enhanced():
        print("‚úÖ –ì—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    show_detection_results()
    
    print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 